function [allData, scenario, sensors] = Driving_Scenario()
%Driving_Scenario - Returns sensor detections
%    allData = Driving_Scenario returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = Driving_Scenario optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.11 (R2021b) and Automated Driving Toolbox 3.4 (R2021b).
% Generated on: 13-Dec-2022 09:52:39

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running

    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;

    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    insMeas = {};
    isValidTime = false(1, numSensors);
    isValidLaneTime = false(1, numSensors);
    isValidPointCloudTime = false(1, numSensors);
    isValidINSTime = false(1, numSensors);

    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        % Generate the ego vehicle lane boundaries
        if isa(sensor, 'visionDetectionGenerator')
            maxLaneDetectionRange = min(500,sensor.MaxRange);
            lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
        end
        type = getDetectorOutput(sensor);
        if strcmp(type, 'Objects only')
            [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes only')
            [laneDets, ~, isValidTime(sensorIndex)] = sensor(lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes and objects')
            [objectDets, numObjects, isValidTime(sensorIndex), laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes with occlusion')
            [laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'PointCloud')
            if sensor.HasRoadsInputPort
                rdmesh = roadMesh(egoVehicle,min(500,sensor.MaxRange));
                [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, rdmesh, time);
            else
                [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, time);
            end
            ptClouds = [ptClouds; ptCloud]; %#ok<AGROW>
        elseif strcmp(type, 'INSMeasurement')
            insMeasCurrent = sensor(actorState, time);
            insMeas = [insMeas; insMeasCurrent]; %#ok<AGROW>
            isValidINSTime(sensorIndex) = true;
        end
    end

    % Aggregate all detections into a structure for later use
    if any(isValidTime) || any(isValidLaneTime) || any(isValidPointCloudTime) || any(isValidINSTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = visionDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [1.5 0], ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([800 800],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{2} = drivingRadarDataGenerator('SensorIndex', 2, ...
    'MountingLocation', [2.8 -0.9 0.2], ...
    'MountingAngles', [-46.2018330644521 0 0], ...
    'RangeLimits', [0 50], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [90 5], ...
    'Profiles', profiles);
sensors{3} = drivingRadarDataGenerator('SensorIndex', 3, ...
    'MountingLocation', [2.8 0.9 0.2], ...
    'MountingAngles', [43.9190758133393 0 0], ...
    'RangeLimits', [0 50], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [90 5], ...
    'Profiles', profiles);
sensors{4} = lidarPointCloudGenerator('SensorIndex', 4, ...
    'SensorLocation', [0.95 0], ...
    'ActorProfiles', profiles);
numSensors = 4;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [56.1 10.2 0;
    -3.6 10.1 0];
laneSpecification = lanespec(2, 'Width', 7.925);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

roadCenters = [30.3 49.9 0;
    30.3 -29.5 0];
laneSpecification = lanespec(2, 'Width', 7.925);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road1');

% Add the barriers
barrierCenters = [33.3 10.1 0;
    27.2 10.1 0];
barrier(scenario, barrierCenters, ...
    'ClassID', 5, ...
    'Width', 0.61, ...
    'Height', 0.81, ...
    'Mesh', driving.scenario.jerseyBarrierMesh, 'PlotColor', [0.65 0.65 0.65], 'Name', 'Jersey Barrier');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-0.340229663134483 13.3570864581275 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
waypoints = [-0.340229663134483 13.3570864581275 0;
    11.5 13.6 0;
    17.7 14.2 0;
    22.5 13.1 0;
    24.9 16 0;
    24.91 20.17 0.01;
    24.9 45 0;
    24.3 85.6 0];
speed = [30;30;15;5;2;2;45;45];
waittime = [0;0;0;0;0;0;0;0];
trajectory(egoVehicle, waypoints, speed, waittime);

% Add the non-ego actors
pedestrian = actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [21.86 18.65 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'Name', 'Pedestrian');
waypoints = [21.86 18.65 0;
    27.01 18.5 0.01;
    31.96 18.5 0.01;
    37.83 18.54 0.01;
    39.35 18.68 0;
    43.42 18.5 0];
speed = [3;3;3;3;3;3];
waittime = [0;0;0;0;0;0];
trajectory(pedestrian, waypoints, speed, waittime);

car1 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [50.2 6.4 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car1');
waypoints = [50.2 6.4 0;
    39.62 5.68 0.01;
    33.83 6.32 0.01;
    25.66 6.32 0.01;
    19.23 6.08 0.01;
    -1.6 6.1 0;
    -19.7 5.6 0;
    -81 -22.7 0;
    -146.7 -98.7 0;
    65.6 -120.5 0];
speed = [35;30;20;35;15;15;15;15;15;15];
waittime = [0;0;0;0;0;0;0;0;0;0];
trajectory(car1, waypoints, speed, waittime);

vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [36.87 -6.31 0.01], ...
    'Yaw', 90, ...
    'Mesh', driving.scenario.truckMesh, ...
    'Name', 'Truck');

bicycle = actor(scenario, ...
    'ClassID', 3, ...
    'Length', 1.7, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [37.2 37.1 0], ...
    'Mesh', driving.scenario.bicycleMesh, ...
    'Name', 'Bicycle');
waypoints = [37.2 37.1 0;
    37.1 32.6 0;
    37.4 26.5 0;
    37.2 20.9 0;
    37.7 17.3 0;
    40.6 17.2 0;
    46.9 17.4 0;
    53.5 17.4 0;
    58.4 18 0;
    64.8 16.2 0;
    124.3 17.1 0];
speed = [35;35;35;35;35;35;35;35;35;35;35];
trajectory(bicycle, waypoints, speed);

car2 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [4.60115640766861 15.9321525526485 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car2');
waypoints = [4.60115640766861 15.9321525526485 0;
    14.35 16.1 0.01;
    17.9 16.9 0;
    21 16.7 0;
    24.2 13.4 0;
    25.2 8.1 0;
    26.6 -3.3 0;
    26.6 -18.4 0;
    27.2 -34.2 0;
    27.4 -56.5 0];
speed = [3;3;3;3;5;5;5;5;5;5];
waittime = [0;0;0;0;0;0;0;0;0;0];
trajectory(car2, waypoints, speed, waittime);

pedestrian1 = actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [38.74 1.62 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'Name', 'Pedestrian1');
waypoints = [38.74 1.62 0;
    35.83 1.87 0.01;
    32.55 1.17 0.01;
    27.29 1.58 0.01;
    21.07 1.09 0;
    19.19 0.55 0;
    -2.1 -2.9 0];
speed = [6;5;5;3;3;3;3];
waittime = [0;0;0;0;0;0;0];
trajectory(pedestrian1, waypoints, speed, waittime);

car3 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [35.3835983288535 -25.647317473842 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [255 0 0] / 255, ...
    'Name', 'Car3');
waypoints = [35.3835983288535 -25.647317473842 0;
    36.44 -15.45 0.01;
    33.9 -10.6 0;
    32.96 -5.93 0.01;
    32.89 -1.77 0.01;
    32.59 3.97 0.01;
    22.92 4.35 0.01;
    19.37 8.43 0.01;
    7.5 10.2 0;
    -7.6 8.3 0;
    -84.8 11.4 0;
    -183.5 128.9 0];
speed = [30;30;10;10;8;8;30;30;30;30;30;30];
waittime = [0;0;0;0;0;0;0;0;0;0;0;0];
trajectory(car3, waypoints, speed, waittime);

function output = getDetectorOutput(sensor)

if isa(sensor, 'visionDetectionGenerator')
    output = sensor.DetectorOutput;
elseif isa(sensor, 'lidarPointCloudGenerator')
    output = 'PointCloud';
elseif isa(sensor, 'insSensor')
    output = 'INSMeasurement';
else
    output = 'Objects only';
end

